
Exercise 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fc  00000000  00000000  00000c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	DDRB &= ~(1<<0);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &= !(1<<1);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	17 ba       	out	0x17, r1	; 23
	DDRC |=(1<<0);
  76:	84 b3       	in	r24, 0x14	; 20
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	84 bb       	out	0x14, r24	; 20
	DDRC |=(1<<1);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	84 bb       	out	0x14, r24	; 20
	
    while (1) 
    {
		
		if(PINB & (1<<0)  &&  PINB & (1<<1))
  82:	b0 9b       	sbis	0x16, 0	; 22
  84:	05 c0       	rjmp	.+10     	; 0x90 <main+0x24>
  86:	b1 9b       	sbis	0x16, 1	; 22
  88:	03 c0       	rjmp	.+6      	; 0x90 <main+0x24>
		PORTC = 0x03;
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	f9 cf       	rjmp	.-14     	; 0x82 <main+0x16>
		
		else if(PINB & (1<<0))
  90:	b0 9b       	sbis	0x16, 0	; 22
  92:	03 c0       	rjmp	.+6      	; 0x9a <main+0x2e>
		PORTC =(1<<0);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
  98:	f4 cf       	rjmp	.-24     	; 0x82 <main+0x16>
		
		else if(PINB & (1<<1))
  9a:	b1 9b       	sbis	0x16, 1	; 22
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <main+0x38>
		PORTC = (1<<1);
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	ef cf       	rjmp	.-34     	; 0x82 <main+0x16>
		
		else
		PORTC = 0x00;
  a4:	15 ba       	out	0x15, r1	; 21
  a6:	ed cf       	rjmp	.-38     	; 0x82 <main+0x16>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
