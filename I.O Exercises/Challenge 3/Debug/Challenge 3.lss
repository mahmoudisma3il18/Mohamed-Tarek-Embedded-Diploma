
Challenge 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067f  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA &= ~(1<<PA0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1<<PA1);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	8a bb       	out	0x1a, r24	; 26
	
	DDRD = 0x0F;
  78:	8f e0       	ldi	r24, 0x0F	; 15
  7a:	81 bb       	out	0x11, r24	; 17
	
	int counter = 0;
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1)
	{
		if (PINA & (1<<PA0))
  80:	c8 9b       	sbis	0x19, 0	; 25
  82:	13 c0       	rjmp	.+38     	; 0xaa <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	eb e4       	ldi	r30, 0x4B	; 75
  86:	fd e1       	ldi	r31, 0x1D	; 29
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
		{
			_delay_ms(30);
			if (PINA & (1<<PA0))
  90:	c8 9b       	sbis	0x19, 0	; 25
  92:	0b c0       	rjmp	.+22     	; 0xaa <main+0x3e>
			{
				counter++;
  94:	01 96       	adiw	r24, 0x01	; 1
				if(counter > 9)
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	14 f0       	brlt	.+4      	; 0xa0 <main+0x34>
				counter = 9;
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	90 e0       	ldi	r25, 0x00	; 0
				PORTD = counter & 0x0F;
  a0:	28 2f       	mov	r18, r24
  a2:	2f 70       	andi	r18, 0x0F	; 15
  a4:	22 bb       	out	0x12, r18	; 18
				while(PINA & (1<<PA0));
  a6:	c8 99       	sbic	0x19, 0	; 25
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x3a>
			}
		}
		
		if (PINA & (1<<PA1))
  aa:	c9 9b       	sbis	0x19, 1	; 25
  ac:	e9 cf       	rjmp	.-46     	; 0x80 <main+0x14>
  ae:	eb e4       	ldi	r30, 0x4B	; 75
  b0:	fd e1       	ldi	r31, 0x1D	; 29
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
		{
			_delay_ms(30);
			if (PINA & (1<<PA1))
  ba:	c9 9b       	sbis	0x19, 1	; 25
  bc:	e1 cf       	rjmp	.-62     	; 0x80 <main+0x14>
			{
				counter--;
  be:	01 97       	sbiw	r24, 0x01	; 1
				if(counter < 0)
  c0:	12 f4       	brpl	.+4      	; 0xc6 <main+0x5a>
				counter = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
				PORTD = counter & 0x0F;
  c6:	28 2f       	mov	r18, r24
  c8:	2f 70       	andi	r18, 0x0F	; 15
  ca:	22 bb       	out	0x12, r18	; 18
				while(PINA & (1<<PA1));
  cc:	c9 99       	sbic	0x19, 1	; 25
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x60>
  d0:	d7 cf       	rjmp	.-82     	; 0x80 <main+0x14>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
