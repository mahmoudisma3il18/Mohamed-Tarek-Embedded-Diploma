
Exercise 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA &= ~(1<<PA2);
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	8a bb       	out	0x1a, r24	; 26
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	8f 60       	ori	r24, 0x0F	; 15
  82:	84 bb       	out	0x14, r24	; 20
	
	unsigned char steps[] = {12,6,3,9};	
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	8b 83       	std	Y+3, r24	; 0x03
  90:	89 e0       	ldi	r24, 0x09	; 9
  92:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char steps_counter = 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1) 
    {
		if(PINA & (1<<PA2)){
  96:	ca 9b       	sbis	0x19, 2	; 25
  98:	15 c0       	rjmp	.+42     	; 0xc4 <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	eb e4       	ldi	r30, 0x4B	; 75
  9c:	fd e1       	ldi	r31, 0x1D	; 29
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			_delay_ms(30);
			if (PINA & (1<<PA2))
  a6:	ca 9b       	sbis	0x19, 2	; 25
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <main+0x58>
			{
				PORTC = 0x0F & steps[steps_counter];
  aa:	e1 e0       	ldi	r30, 0x01	; 1
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ec 0f       	add	r30, r28
  b0:	fd 1f       	adc	r31, r29
  b2:	e8 0f       	add	r30, r24
  b4:	f1 1d       	adc	r31, r1
  b6:	90 81       	ld	r25, Z
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	95 bb       	out	0x15, r25	; 21
				steps_counter++;
  bc:	8f 5f       	subi	r24, 0xFF	; 255
				
				if(steps_counter == 4)
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <main+0x58>
				steps_counter = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}while(PINA & (1<<PA2));
  c4:	ca 99       	sbic	0x19, 2	; 25
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x58>
  c8:	e6 cf       	rjmp	.-52     	; 0x96 <main+0x2a>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
