
Exercise 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000074a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f0  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA &= ~(1<<PA0) & ~(1<<PA1) & ~(1<<PA2);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	88 7f       	andi	r24, 0xF8	; 248
  70:	8a bb       	out	0x1a, r24	; 26
	DDRC |= (1<<PC0) | (1<<PC1);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	83 60       	ori	r24, 0x03	; 3
  76:	84 bb       	out	0x14, r24	; 20
	 
    while (1) 
    {
		if (PINA & (1<<PA0))
  78:	c8 9b       	sbis	0x19, 0	; 25
  7a:	07 c0       	rjmp	.+14     	; 0x8a <main+0x1e>
		{
			DDRC |= (1<<PC0);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	84 bb       	out	0x14, r24	; 20
			DDRC &= ~(1<<PC1);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	84 bb       	out	0x14, r24	; 20
  88:	f7 cf       	rjmp	.-18     	; 0x78 <main+0xc>
		}
		else if (PINA & (1<<PA1))
  8a:	c9 9b       	sbis	0x19, 1	; 25
  8c:	07 c0       	rjmp	.+14     	; 0x9c <main+0x30>
		{
			DDRC |= (1<<PC1);
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	82 60       	ori	r24, 0x02	; 2
  92:	84 bb       	out	0x14, r24	; 20
			DDRC &= ~(1<<PC0);
  94:	84 b3       	in	r24, 0x14	; 20
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	84 bb       	out	0x14, r24	; 20
  9a:	ee cf       	rjmp	.-36     	; 0x78 <main+0xc>
		}
		else if(PINA & (1<<PA2))
  9c:	ca 9b       	sbis	0x19, 2	; 25
  9e:	ec cf       	rjmp	.-40     	; 0x78 <main+0xc>
		{
			DDRC &= ~(1<<PC0);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	84 bb       	out	0x14, r24	; 20
			DDRC &= ~(1<<PC1);
  a6:	84 b3       	in	r24, 0x14	; 20
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	84 bb       	out	0x14, r24	; 20
  ac:	e5 cf       	rjmp	.-54     	; 0x78 <main+0xc>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
