
Exercise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_PWM_Init>:
#include <avr/io.h>
#include <util/delay.h>


void Timer0_PWM_Init(unsigned char ticks){
	DDRB |= (1<<PB3);
  6c:	97 b3       	in	r25, 0x17	; 23
  6e:	98 60       	ori	r25, 0x08	; 8
  70:	97 bb       	out	0x17, r25	; 23
	TCNT0 = 0x00;
  72:	12 be       	out	0x32, r1	; 50
	OCR0 = ticks;
  74:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  76:	8a e6       	ldi	r24, 0x6A	; 106
  78:	83 bf       	out	0x33, r24	; 51
  7a:	08 95       	ret

0000007c <main>:
}

int main(void)
{
    /* Replace with your application code */
    DDRA &= ~(1<<PA0) & ~(1<<PA1) & ~(1<<PA2);
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	88 7f       	andi	r24, 0xF8	; 248
  80:	8a bb       	out	0x1a, r24	; 26
    DDRC |= (1<<PC0) | (1<<PC1);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	83 60       	ori	r24, 0x03	; 3
  86:	84 bb       	out	0x14, r24	; 20
	Timer0_PWM_Init(255);
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_PWM_Init>
    
    while (1)
    {
	    if (PINA & (1<<PA0))
  8e:	c8 9b       	sbis	0x19, 0	; 25
  90:	07 c0       	rjmp	.+14     	; 0xa0 <main+0x24>
	    {
		    DDRC |= (1<<PC0);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bb       	out	0x14, r24	; 20
		    DDRC &= ~(1<<PC1);
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	84 bb       	out	0x14, r24	; 20
  9e:	f7 cf       	rjmp	.-18     	; 0x8e <main+0x12>
	    }
	    else if (PINA & (1<<PA1))
  a0:	c9 9b       	sbis	0x19, 1	; 25
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <main+0x36>
	    {
		    DDRC |= (1<<PC1);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	84 bb       	out	0x14, r24	; 20
		    DDRC &= ~(1<<PC0);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	84 bb       	out	0x14, r24	; 20
  b0:	ee cf       	rjmp	.-36     	; 0x8e <main+0x12>
	    }
	    else if(PINA & (1<<PA2))
  b2:	ca 9b       	sbis	0x19, 2	; 25
  b4:	ec cf       	rjmp	.-40     	; 0x8e <main+0x12>
	    {
		    DDRC &= ~(1<<PC0);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	84 bb       	out	0x14, r24	; 20
		    DDRC &= ~(1<<PC1);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	84 bb       	out	0x14, r24	; 20
  c2:	e5 cf       	rjmp	.-54     	; 0x8e <main+0x12>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
