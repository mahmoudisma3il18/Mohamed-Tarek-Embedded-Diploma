
Challenge 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000607  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000222  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 65 00 	call	0xca	; 0xca <main>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_18>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile int counter = 0;

ISR(INT2_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	
	counter++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <INT2_Init>:

void INT2_Init(void)
	{
		SREG &= ~(1<<7);
  aa:	8f b7       	in	r24, 0x3f	; 63
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	8f bf       	out	0x3f, r24	; 63
		DDRB &= ~(1<<2);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	87 bb       	out	0x17, r24	; 23
		GICR |= (1<<INT2);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8b bf       	out	0x3b, r24	; 59
		MCUCSR |= (1<<ISC2);
  bc:	84 b7       	in	r24, 0x34	; 52
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	84 bf       	out	0x34, r24	; 52
		SREG |= (1<<7);
  c2:	8f b7       	in	r24, 0x3f	; 63
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8f bf       	out	0x3f, r24	; 63
  c8:	08 95       	ret

000000ca <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC |= 0x0F;
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	8f 60       	ori	r24, 0x0F	; 15
  ce:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  d0:	15 ba       	out	0x15, r1	; 21
	
	INT2_Init();
  d2:	0e 94 55 00 	call	0xaa	; 0xaa <INT2_Init>
	
    while (1) 
    {
		if(counter > 9)
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	24 f0       	brlt	.+8      	; 0xea <main+0x20>
		counter = 0;
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = 0x0F & counter;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	85 bb       	out	0x15, r24	; 21
    }
  f6:	ef cf       	rjmp	.-34     	; 0xd6 <main+0xc>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
