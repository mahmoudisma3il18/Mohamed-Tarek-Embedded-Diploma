
Exercise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061a  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <avr/interrupt.h>
#include <util/delay.h>

unsigned char Flag = 0;

ISR(INT1_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	
	Flag = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <INT1_Init>:


void INT1_Init(void){
	SREG &= ~(1<<7);
  9a:	8f b7       	in	r24, 0x3f	; 63
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8f bf       	out	0x3f, r24	; 63
	
	DDRD &= (1<<PD3);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	88 70       	andi	r24, 0x08	; 8
  a4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD3);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	82 bb       	out	0x12, r24	; 18
	
	GICR |= (1<<INT1);
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC11) & ~(1<<ISC10);
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	85 bf       	out	0x35, r24	; 53
	
	SREG |= (1<<7);
  b8:	8f b7       	in	r24, 0x3f	; 63
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	8f bf       	out	0x3f, r24	; 63
  be:	08 95       	ret

000000c0 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 bb       	out	0x14, r24	; 20
	PORTC= 0x01;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	85 bb       	out	0x15, r24	; 21
	
	INT1_Init();
  c8:	0e 94 4d 00 	call	0x9a	; 0x9a <INT1_Init>
	
	
    while (1) 
    {
		
		if (Flag == 0)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	81 11       	cpse	r24, r1
  d2:	12 c0       	rjmp	.+36     	; 0xf8 <main+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f e9       	ldi	r18, 0x9F	; 159
  d6:	36 e8       	ldi	r19, 0x86	; 134
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	40 40       	sbci	r20, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x1a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x24>
  e4:	00 00       	nop
		{
			_delay_ms(500);
			PORTC <<= 1;
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	88 0f       	add	r24, r24
  ea:	85 bb       	out	0x15, r24	; 21
			if(PORTC == 0x00)
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	81 11       	cpse	r24, r1
  f0:	ed cf       	rjmp	.-38     	; 0xcc <main+0xc>
			PORTC = 0x01; 
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	ea cf       	rjmp	.-44     	; 0xcc <main+0xc>
		}
		else if (Flag == 1){
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	41 f7       	brne	.-48     	; 0xcc <main+0xc>
  fc:	17 c0       	rjmp	.+46     	; 0x12c <main+0x6c>
			
			for (int i = 0 ; i<5 ;i++)
			{
				PORTC = 0xFF;
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	25 bb       	out	0x15, r18	; 21
 102:	2f e9       	ldi	r18, 0x9F	; 159
 104:	36 e8       	ldi	r19, 0x86	; 134
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x48>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x52>
 112:	00 00       	nop
				_delay_ms(500);
				PORTC = 0x00;
 114:	15 ba       	out	0x15, r1	; 21
 116:	2f e9       	ldi	r18, 0x9F	; 159
 118:	36 e8       	ldi	r19, 0x86	; 134
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x5c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x66>
 126:	00 00       	nop
			if(PORTC == 0x00)
			PORTC = 0x01; 
		}
		else if (Flag == 1){
			
			for (int i = 0 ; i<5 ;i++)
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x70>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	91 05       	cpc	r25, r1
 134:	24 f3       	brlt	.-56     	; 0xfe <main+0x3e>
				_delay_ms(500);
				PORTC = 0x00;
				_delay_ms(500);
			}
			
			Flag = 0;
 136:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	c8 cf       	rjmp	.-112    	; 0xcc <main+0xc>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
