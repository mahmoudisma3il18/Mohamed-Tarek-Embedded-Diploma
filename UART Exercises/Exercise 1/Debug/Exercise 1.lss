
Exercise 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000834  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b6  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
	
	uint8_t data ;  /*  Var to hold Data  */
	
	UART_init(BaudRate_2400); /* Intialize UART and set Baud Rate to 9600 */
  6c:	80 e6       	ldi	r24, 0x60	; 96
  6e:	99 e0       	ldi	r25, 0x09	; 9
  70:	0e 94 42 00 	call	0x84	; 0x84 <UART_init>
	UART_sendByte('M');
  74:	8d e4       	ldi	r24, 0x4D	; 77
  76:	0e 94 65 00 	call	0xca	; 0xca <UART_sendByte>
    while (1) 
    {
		data = UART_recieveByte();
  7a:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_recieveByte>
		UART_sendByte(data);
  7e:	0e 94 65 00 	call	0xca	; 0xca <UART_sendByte>
  82:	fb cf       	rjmp	.-10     	; 0x7a <main+0xe>

00000084 <UART_init>:
Description : Initialize UART driver
*/
void UART_init(UART_BaudRate br) {
	
	/*  Set Baud Rate  */
	uint16_t br_value = (((F_CPU / (br * 16UL))) - 1) ; // Calculates value to be put in baud rate register
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	aa 1f       	adc	r26, r26
  8e:	bb 1f       	adc	r27, r27
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	aa 1f       	adc	r26, r26
  96:	bb 1f       	adc	r27, r27
  98:	9c 01       	movw	r18, r24
  9a:	ad 01       	movw	r20, r26
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	44 1f       	adc	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	44 1f       	adc	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	60 e4       	ldi	r22, 0x40	; 64
  ae:	72 e4       	ldi	r23, 0x42	; 66
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 6d 00 	call	0xda	; 0xda <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
	UBRRH = br_value>>8;
  bc:	30 bd       	out	0x20, r19	; 32
	UBRRL = br_value;
  be:	29 b9       	out	0x09, r18	; 9
	
	/*  Enable Receiver and Transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	    1. Asynchronous Mode
		2. No Parity Bit
		3. 1 Stop Bit
		4. 8-bit Data 
	*/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	80 bd       	out	0x20, r24	; 32
  c8:	08 95       	ret

000000ca <UART_sendByte>:
Description : Send One Byte
*/
void UART_sendByte(uint8_t data) {
	
	/* Wait for empty Transmit buffer */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <UART_sendByte>
	
	/* Put data into buffer and send data */
	UDR = data;
  ce:	8c b9       	out	0x0c, r24	; 12
  d0:	08 95       	ret

000000d2 <UART_recieveByte>:
uint8_t UART_recieveByte(void) {
	
	uint8_t recieved_data ;  /* Var to hold received data */
	
	/* Wait for data to be received */
	while(BIT_IS_CLEAR(UCSRA,RXC));
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <UART_recieveByte>
	
	recieved_data = UDR;  /* Get  received data from buffer */
  d6:	8c b1       	in	r24, 0x0c	; 12
	
	return recieved_data;
}
  d8:	08 95       	ret

000000da <__udivmodsi4>:
  da:	a1 e2       	ldi	r26, 0x21	; 33
  dc:	1a 2e       	mov	r1, r26
  de:	aa 1b       	sub	r26, r26
  e0:	bb 1b       	sub	r27, r27
  e2:	fd 01       	movw	r30, r26
  e4:	0d c0       	rjmp	.+26     	; 0x100 <__udivmodsi4_ep>

000000e6 <__udivmodsi4_loop>:
  e6:	aa 1f       	adc	r26, r26
  e8:	bb 1f       	adc	r27, r27
  ea:	ee 1f       	adc	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	a2 17       	cp	r26, r18
  f0:	b3 07       	cpc	r27, r19
  f2:	e4 07       	cpc	r30, r20
  f4:	f5 07       	cpc	r31, r21
  f6:	20 f0       	brcs	.+8      	; 0x100 <__udivmodsi4_ep>
  f8:	a2 1b       	sub	r26, r18
  fa:	b3 0b       	sbc	r27, r19
  fc:	e4 0b       	sbc	r30, r20
  fe:	f5 0b       	sbc	r31, r21

00000100 <__udivmodsi4_ep>:
 100:	66 1f       	adc	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	88 1f       	adc	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	1a 94       	dec	r1
 10a:	69 f7       	brne	.-38     	; 0xe6 <__udivmodsi4_loop>
 10c:	60 95       	com	r22
 10e:	70 95       	com	r23
 110:	80 95       	com	r24
 112:	90 95       	com	r25
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
 118:	bd 01       	movw	r22, r26
 11a:	cf 01       	movw	r24, r30
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
