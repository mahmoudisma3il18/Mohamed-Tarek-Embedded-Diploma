
MC 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a22  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e0  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d7  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a7  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000193  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_getPressedKey>:

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	2a c0       	rjmp	.+84     	; 0xdc <KEYPAD_getPressedKey+0x5a>
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <KEYPAD_getPressedKey+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <KEYPAD_getPressedKey+0xe>
  98:	8a bb       	out	0x1a, r24	; 26
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
  9a:	80 95       	com	r24
  9c:	8b bb       	out	0x1b, r24	; 27
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <KEYPAD_getPressedKey+0x50>
		{
			
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <KEYPAD_getPressedKey+0x2e>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <KEYPAD_getPressedKey+0x2a>
  b4:	80 fd       	sbrc	r24, 0
  b6:	0b c0       	rjmp	.+22     	; 0xce <KEYPAD_getPressedKey+0x4c>
				return keypad[row][col];	
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	20 5a       	subi	r18, 0xA0	; 160
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	f9 01       	movw	r30, r18
  c6:	e4 0f       	add	r30, r20
  c8:	f5 1f       	adc	r31, r21
  ca:	80 81       	ld	r24, Z
  cc:	08 95       	ret
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	24 30       	cpi	r18, 0x04	; 4
  d4:	31 05       	cpc	r19, r1
  d6:	34 f3       	brlt	.-52     	; 0xa4 <KEYPAD_getPressedKey+0x22>

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	44 30       	cpi	r20, 0x04	; 4
  de:	51 05       	cpc	r21, r1
  e0:	9c f2       	brlt	.-90     	; 0x88 <KEYPAD_getPressedKey+0x6>
  e2:	cf cf       	rjmp	.-98     	; 0x82 <KEYPAD_getPressedKey>

000000e4 <main>:
{
    /* Replace with your application code */
	
	uint8_t var_char;                        /* Var to hold data  */
	
	UART_init(BaudRate_2400);                /* Initialization UART with Baud Rate 2400  */
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0xe>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x18>
  fc:	00 00       	nop
	
	_delay_ms(2000);                         /* Delay until Initialization is done  */
    while (1) 
    {
		var_char = KEYPAD_getPressedKey();
  fe:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_getPressedKey>
		UART_sendByte(var_char);
 102:	0e 94 b0 00 	call	0x160	; 0x160 <UART_sendByte>
 106:	2f e9       	ldi	r18, 0x9F	; 159
 108:	86 e8       	ldi	r24, 0x86	; 134
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x28>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x32>
 116:	00 00       	nop
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0x1a>

0000011a <UART_init>:
Description : Initialize UART driver
*/
void UART_init(UART_BaudRate br) {
	
	/*  Set Baud Rate  */
	uint16_t br_value = (((F_CPU / (br * 16UL))) - 1) ; // Calculates value to be put in baud rate register
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	9c 01       	movw	r18, r24
 130:	ad 01       	movw	r20, r26
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	44 1f       	adc	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	44 1f       	adc	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	60 e4       	ldi	r22, 0x40	; 64
 144:	72 e4       	ldi	r23, 0x42	; 66
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 b4 00 	call	0x168	; 0x168 <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
	UBRRH = br_value>>8;
 152:	30 bd       	out	0x20, r19	; 32
	UBRRL = br_value;
 154:	29 b9       	out	0x09, r18	; 9
	
	/*  Enable Receiver and Transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	8a b9       	out	0x0a, r24	; 10
	    1. Asynchronous Mode
		2. No Parity Bit
		3. 1 Stop Bit
		4. 8-bit Data 
	*/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 15a:	86 e8       	ldi	r24, 0x86	; 134
 15c:	80 bd       	out	0x20, r24	; 32
 15e:	08 95       	ret

00000160 <UART_sendByte>:
Description : Send One Byte
*/
void UART_sendByte(uint8_t data) {
	
	/* Wait for empty Transmit buffer */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <UART_sendByte>
	
	/* Put data into buffer and send data */
	UDR = data;
 164:	8c b9       	out	0x0c, r24	; 12
 166:	08 95       	ret

00000168 <__udivmodsi4>:
 168:	a1 e2       	ldi	r26, 0x21	; 33
 16a:	1a 2e       	mov	r1, r26
 16c:	aa 1b       	sub	r26, r26
 16e:	bb 1b       	sub	r27, r27
 170:	fd 01       	movw	r30, r26
 172:	0d c0       	rjmp	.+26     	; 0x18e <__udivmodsi4_ep>

00000174 <__udivmodsi4_loop>:
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	ee 1f       	adc	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	a2 17       	cp	r26, r18
 17e:	b3 07       	cpc	r27, r19
 180:	e4 07       	cpc	r30, r20
 182:	f5 07       	cpc	r31, r21
 184:	20 f0       	brcs	.+8      	; 0x18e <__udivmodsi4_ep>
 186:	a2 1b       	sub	r26, r18
 188:	b3 0b       	sbc	r27, r19
 18a:	e4 0b       	sbc	r30, r20
 18c:	f5 0b       	sbc	r31, r21

0000018e <__udivmodsi4_ep>:
 18e:	66 1f       	adc	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	1a 94       	dec	r1
 198:	69 f7       	brne	.-38     	; 0x174 <__udivmodsi4_loop>
 19a:	60 95       	com	r22
 19c:	70 95       	com	r23
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	9b 01       	movw	r18, r22
 1a4:	ac 01       	movw	r20, r24
 1a6:	bd 01       	movw	r22, r26
 1a8:	cf 01       	movw	r24, r30
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
