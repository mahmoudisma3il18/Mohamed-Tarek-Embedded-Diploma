
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088c  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070d  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a9  00000000  00000000  0000123d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000170  00000000  00000000  00001b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e7       	ldi	r18, 0x7F	; 127
  84:	84 e8       	ldi	r24, 0x84	; 132
  86:	9e e1       	ldi	r25, 0x1E	; 30
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x6>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x10>
  92:	00 00       	nop
{
    /* Replace with your application code */
	
	_delay_ms(10000);
	
	UART_init(BaudRate_2400); /* Init Uart with baud rate 2400 */
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	99 e0       	ldi	r25, 0x09	; 9
  98:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
    
	UART_sendString("I am Micro1 \n"); /* Send String */
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendString>
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x22>

000000a6 <UART_init>:
	while(BIT_IS_CLEAR(UCSRA,RXC));
	
	recieved_data = UDR;  /* Get  received data from buffer */
	
	return recieved_data;
}
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	aa 1f       	adc	r26, r26
  b8:	bb 1f       	adc	r27, r27
  ba:	9c 01       	movw	r18, r24
  bc:	ad 01       	movw	r20, r26
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	44 1f       	adc	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	60 e4       	ldi	r22, 0x40	; 64
  d0:	72 e4       	ldi	r23, 0x42	; 66
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 87 00 	call	0x10e	; 0x10e <__udivmodsi4>
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	30 bd       	out	0x20, r19	; 32
  e0:	29 b9       	out	0x09, r18	; 9
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	86 e8       	ldi	r24, 0x86	; 134
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	08 95       	ret

000000ec <UART_sendByte>:
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <UART_sendByte>
  f0:	8c b9       	out	0x0c, r24	; 12
  f2:	08 95       	ret

000000f4 <UART_sendString>:

/*
Description : Send array of bytes (String)
*/
void UART_sendString(uint8_t *p_data) {
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
	
	while(*p_data != '\0')
  fa:	03 c0       	rjmp	.+6      	; 0x102 <UART_sendString+0xe>
	{
		UART_sendByte(*p_data);  /* Send Byte of data */
  fc:	0e 94 76 00 	call	0xec	; 0xec <UART_sendByte>
		p_data++;                /* Increment Pointer */
 100:	21 96       	adiw	r28, 0x01	; 1
/*
Description : Send array of bytes (String)
*/
void UART_sendString(uint8_t *p_data) {
	
	while(*p_data != '\0')
 102:	88 81       	ld	r24, Y
 104:	81 11       	cpse	r24, r1
 106:	fa cf       	rjmp	.-12     	; 0xfc <UART_sendString+0x8>
	{
		UART_sendByte(*p_data);  /* Send Byte of data */
		p_data++;                /* Increment Pointer */
	}
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <__udivmodsi4>:
 10e:	a1 e2       	ldi	r26, 0x21	; 33
 110:	1a 2e       	mov	r1, r26
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	fd 01       	movw	r30, r26
 118:	0d c0       	rjmp	.+26     	; 0x134 <__udivmodsi4_ep>

0000011a <__udivmodsi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	ee 1f       	adc	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	e4 07       	cpc	r30, r20
 128:	f5 07       	cpc	r31, r21
 12a:	20 f0       	brcs	.+8      	; 0x134 <__udivmodsi4_ep>
 12c:	a2 1b       	sub	r26, r18
 12e:	b3 0b       	sbc	r27, r19
 130:	e4 0b       	sbc	r30, r20
 132:	f5 0b       	sbc	r31, r21

00000134 <__udivmodsi4_ep>:
 134:	66 1f       	adc	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	88 1f       	adc	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	1a 94       	dec	r1
 13e:	69 f7       	brne	.-38     	; 0x11a <__udivmodsi4_loop>
 140:	60 95       	com	r22
 142:	70 95       	com	r23
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	9b 01       	movw	r18, r22
 14a:	ac 01       	movw	r20, r24
 14c:	bd 01       	movw	r22, r26
 14e:	cf 01       	movw	r24, r30
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
