
MC 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d49  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000854  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e2  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000530  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ff  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002c0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  7a:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_sendCommand>:
}

void LCD_sendCommand(uint8_t command)
{
	
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7e       	andi	r25, 0xEF	; 239
  86:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 7d       	andi	r25, 0xDF	; 223
  8c:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	e9 ef       	ldi	r30, 0xF9	; 249
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_sendCommand+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_sendCommand+0x16>
  98:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT_OUT,E);
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	92 bb       	out	0x12, r25	; 18
  a0:	e9 ef       	ldi	r30, 0xF9	; 249
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_sendCommand+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_sendCommand+0x28>
  aa:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT_OUT = command;
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_sendCommand+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_sendCommand+0x36>
  b8:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
  c0:	e9 ef       	ldi	r30, 0xF9	; 249
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_sendCommand+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_sendCommand+0x48>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <LCD_init>:
/*--------------------------------- Functions --------------------------------------*/

void LCD_init()
{
	
	LCD_DATA_PORT_DIR = 0xFF ; 
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<RW) | (1<<E);
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 67       	ori	r24, 0x70	; 112
  d6:	81 bb       	out	0x11, r24	; 17
	
	LCD_sendCommand(SET_LCD_TWO_LINE_EIGHT_BIT_MODE);
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_BLINKING);
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
  ea:	08 95       	ret

000000ec <LCD_displayCharacter>:
}

void LCD_displayCharacter(uint8_t data)
{
	
	SET_BIT(LCD_CTRL_PORT_OUT,RS);
  ec:	92 b3       	in	r25, 0x12	; 18
  ee:	90 61       	ori	r25, 0x10	; 16
  f0:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);
  f2:	92 b3       	in	r25, 0x12	; 18
  f4:	9f 7d       	andi	r25, 0xDF	; 223
  f6:	92 bb       	out	0x12, r25	; 18
  f8:	e9 ef       	ldi	r30, 0xF9	; 249
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_displayCharacter+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_displayCharacter+0x16>
 102:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT_OUT,E);
 104:	92 b3       	in	r25, 0x12	; 18
 106:	90 64       	ori	r25, 0x40	; 64
 108:	92 bb       	out	0x12, r25	; 18
 10a:	e9 ef       	ldi	r30, 0xF9	; 249
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_displayCharacter+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_displayCharacter+0x28>
 114:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT_OUT = data;
 116:	85 bb       	out	0x15, r24	; 21
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_displayCharacter+0x30>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_displayCharacter+0x36>
 122:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	82 bb       	out	0x12, r24	; 18
 12a:	e9 ef       	ldi	r30, 0xF9	; 249
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_displayCharacter+0x42>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_displayCharacter+0x48>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <LCD_displayString>:
	_delay_ms(1);

}

void LCD_displayString(const uint8_t *String)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
	
	while((*String) != '\0')
 13e:	03 c0       	rjmp	.+6      	; 0x146 <LCD_displayString+0xe>
	{
		LCD_displayCharacter(*String);
 140:	0e 94 76 00 	call	0xec	; 0xec <LCD_displayCharacter>
		String++;
 144:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_displayString(const uint8_t *String)
{
	
	while((*String) != '\0')
 146:	88 81       	ld	r24, Y
 148:	81 11       	cpse	r24, r1
 14a:	fa cf       	rjmp	.-12     	; 0x140 <LCD_displayString+0x8>
		LCD_displayCharacter(*String);
		String++;
		
	}
	
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <main>:

#define F_CPU  1000000UL


int main(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	64 97       	sbiw	r28, 0x14	; 20
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	
	uint8_t data[20];
	
	LCD_init();  /* Init LCD */
 166:	0e 94 67 00 	call	0xce	; 0xce <LCD_init>
	
	UART_init(BaudRate_2400);  /*  Init UART with Baud Rate 2400  */
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	99 e0       	ldi	r25, 0x09	; 9
 16e:	0e 94 c2 00 	call	0x184	; 0x184 <UART_init>
	
	UART_recieveString(data);     /*  Receive string  */
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_recieveString>
	
	LCD_displayString(data);      /* Display Data on LCD */
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_displayString>
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x30>

00000184 <UART_init>:
	while(*p_data != '\0')
	{
		UART_sendByte(*p_data);  /* Send Byte of data */
		p_data++;                /* Increment Pointer */
	}
}
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	9c 01       	movw	r18, r24
 19a:	ad 01       	movw	r20, r26
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	44 1f       	adc	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	44 1f       	adc	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	60 e4       	ldi	r22, 0x40	; 64
 1ae:	72 e4       	ldi	r23, 0x42	; 66
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 0a 01 	call	0x214	; 0x214 <__udivmodsi4>
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	31 09       	sbc	r19, r1
 1bc:	30 bd       	out	0x20, r19	; 32
 1be:	29 b9       	out	0x09, r18	; 9
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	8a b9       	out	0x0a, r24	; 10
 1c4:	86 e8       	ldi	r24, 0x86	; 134
 1c6:	80 bd       	out	0x20, r24	; 32
 1c8:	08 95       	ret

000001ca <UART_recieveByte>:
 1ca:	5f 9b       	sbis	0x0b, 7	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <UART_recieveByte>
 1ce:	8c b1       	in	r24, 0x0c	; 12
 1d0:	08 95       	ret

000001d2 <UART_recieveString>:

/*
Description : Receive array of chars (String)
*/
void UART_recieveString(uint8_t *String) {
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	8c 01       	movw	r16, r24
	
	
	uint8_t i = 0;                          /*  Counter */
	
	String[i] = UART_recieveByte();         /*  Receive Data from UART  */
 1de:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_recieveByte>
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
Description : Receive array of chars (String)
*/
void UART_recieveString(uint8_t *String) {
	
	
	uint8_t i = 0;                          /*  Counter */
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
	
	String[i] = UART_recieveByte();         /*  Receive Data from UART  */
	 
	while(String[i] != '\n')                /*  Check for end of String  */
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <UART_recieveString+0x28>
	{
		i++;                                /*  Increment Counter */
 1ea:	cf 5f       	subi	r28, 0xFF	; 255
		String[i] = UART_recieveByte();
 1ec:	78 01       	movw	r14, r16
 1ee:	ec 0e       	add	r14, r28
 1f0:	f1 1c       	adc	r15, r1
 1f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_recieveByte>
 1f6:	f7 01       	movw	r30, r14
 1f8:	80 83       	st	Z, r24
	
	uint8_t i = 0;                          /*  Counter */
	
	String[i] = UART_recieveByte();         /*  Receive Data from UART  */
	 
	while(String[i] != '\n')                /*  Check for end of String  */
 1fa:	f8 01       	movw	r30, r16
 1fc:	ec 0f       	add	r30, r28
 1fe:	f1 1d       	adc	r31, r1
 200:	80 81       	ld	r24, Z
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	91 f7       	brne	.-28     	; 0x1ea <UART_recieveString+0x18>
	{
		i++;                                /*  Increment Counter */
		String[i] = UART_recieveByte();
	}
	String[i] = '\0';                      /*    Termnating Char  */
 206:	10 82       	st	Z, r1
	
}
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <__udivmodsi4>:
 214:	a1 e2       	ldi	r26, 0x21	; 33
 216:	1a 2e       	mov	r1, r26
 218:	aa 1b       	sub	r26, r26
 21a:	bb 1b       	sub	r27, r27
 21c:	fd 01       	movw	r30, r26
 21e:	0d c0       	rjmp	.+26     	; 0x23a <__udivmodsi4_ep>

00000220 <__udivmodsi4_loop>:
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	ee 1f       	adc	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	a2 17       	cp	r26, r18
 22a:	b3 07       	cpc	r27, r19
 22c:	e4 07       	cpc	r30, r20
 22e:	f5 07       	cpc	r31, r21
 230:	20 f0       	brcs	.+8      	; 0x23a <__udivmodsi4_ep>
 232:	a2 1b       	sub	r26, r18
 234:	b3 0b       	sbc	r27, r19
 236:	e4 0b       	sbc	r30, r20
 238:	f5 0b       	sbc	r31, r21

0000023a <__udivmodsi4_ep>:
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a 94       	dec	r1
 244:	69 f7       	brne	.-38     	; 0x220 <__udivmodsi4_loop>
 246:	60 95       	com	r22
 248:	70 95       	com	r23
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	bd 01       	movw	r22, r26
 254:	cf 01       	movw	r24, r30
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
