
MC 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000771  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044f  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  7a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_getPressedKey>:

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	2b c0       	rjmp	.+86     	; 0xde <KEYPAD_getPressedKey+0x5c>
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <KEYPAD_getPressedKey+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <KEYPAD_getPressedKey+0xe>
  98:	8a bb       	out	0x1a, r24	; 26
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
  9a:	80 95       	com	r24
  9c:	8b bb       	out	0x1b, r24	; 27
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	18 c0       	rjmp	.+48     	; 0xd4 <KEYPAD_getPressedKey+0x52>
		{
			
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <KEYPAD_getPressedKey+0x2e>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <KEYPAD_getPressedKey+0x2a>
  b4:	80 fd       	sbrc	r24, 0
  b6:	0c c0       	rjmp	.+24     	; 0xd0 <KEYPAD_getPressedKey+0x4e>
				return keypad[row][col];	
  b8:	c9 01       	movw	r24, r18
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	28 0f       	add	r18, r24
  c0:	39 1f       	adc	r19, r25
  c2:	20 5a       	subi	r18, 0xA0	; 160
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	f9 01       	movw	r30, r18
  c8:	e4 0f       	add	r30, r20
  ca:	f5 1f       	adc	r31, r21
  cc:	80 81       	ld	r24, Z
  ce:	08 95       	ret
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	24 30       	cpi	r18, 0x04	; 4
  d6:	31 05       	cpc	r19, r1
  d8:	2c f3       	brlt	.-54     	; 0xa4 <KEYPAD_getPressedKey+0x22>

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	43 30       	cpi	r20, 0x03	; 3
  e0:	51 05       	cpc	r21, r1
  e2:	94 f2       	brlt	.-92     	; 0x88 <KEYPAD_getPressedKey+0x6>
  e4:	ce cf       	rjmp	.-100    	; 0x82 <KEYPAD_getPressedKey>

000000e6 <main>:
{
    /* Replace with your application code */
	
	uint8_t data_var ; /* Variable to hold data */
	
	UART_init(BaudRate_2400);
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	99 e0       	ldi	r25, 0x09	; 9
  ea:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_init>
    while (1) 
    {
		data_var = KEYPAD_getPressedKey(); /* Read Data from keypad */
  ee:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_getPressedKey>
		UART_sendByte(data_var);           /* Send Data over UART */
  f2:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_sendByte>
  f6:	fb cf       	rjmp	.-10     	; 0xee <main+0x8>

000000f8 <UART_init>:
Description : Initialize UART driver
*/
void UART_init(UART_BaudRate br) {
	
	/*  Set Baud Rate  */
	uint16_t br_value = (((F_CPU / (br * 16UL))) - 1) ; // Calculates value to be put in baud rate register
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	aa 1f       	adc	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	9c 01       	movw	r18, r24
 10e:	ad 01       	movw	r20, r26
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	44 1f       	adc	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	44 1f       	adc	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	60 e4       	ldi	r22, 0x40	; 64
 122:	72 e4       	ldi	r23, 0x42	; 66
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 a3 00 	call	0x146	; 0x146 <__udivmodsi4>
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	31 09       	sbc	r19, r1
	UBRRH = br_value>>8;
 130:	30 bd       	out	0x20, r19	; 32
	UBRRL = br_value;
 132:	29 b9       	out	0x09, r18	; 9
	
	/*  Enable Receiver and Transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	8a b9       	out	0x0a, r24	; 10
	    1. Asynchronous Mode
		2. No Parity Bit
		3. 1 Stop Bit
		4. 8-bit Data 
	*/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	80 bd       	out	0x20, r24	; 32
 13c:	08 95       	ret

0000013e <UART_sendByte>:
Description : Send One Byte
*/
void UART_sendByte(uint8_t data) {
	
	/* Wait for empty Transmit buffer */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <UART_sendByte>
	
	/* Put data into buffer and send data */
	UDR = data;
 142:	8c b9       	out	0x0c, r24	; 12
 144:	08 95       	ret

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
