
MC 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080a  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b6  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
	
	uint8_t var_data;
	
	DDRC = 0xFF; /* Set PortC as output */ 
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	
	UART_init(BaudRate_2400); /* Initialize Uart with 2400 Baud Rate */
  70:	80 e6       	ldi	r24, 0x60	; 96
  72:	99 e0       	ldi	r25, 0x09	; 9
  74:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	
    while (1) 
    {
		var_data = UART_recieveByte(); /* Receive Data from UART */
  78:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_recieveByte>
		
		var_data = var_data - 48 ; /* Convert from char to number */
  7c:	20 ed       	ldi	r18, 0xD0	; 208
  7e:	28 0f       	add	r18, r24
		
		PORTC = (1<<var_data);     /* Turn on led */
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	2a 95       	dec	r18
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	85 bb       	out	0x15, r24	; 21
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

00000092 <UART_init>:
	
	/* Wait for empty Transmit buffer */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
	
	/* Put data into buffer and send data */
	UDR = data;
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	aa 1f       	adc	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	9c 01       	movw	r18, r24
  a8:	ad 01       	movw	r20, r26
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	44 1f       	adc	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	60 e4       	ldi	r22, 0x40	; 64
  bc:	72 e4       	ldi	r23, 0x42	; 66
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 70 00 	call	0xe0	; 0xe0 <__udivmodsi4>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	30 bd       	out	0x20, r19	; 32
  cc:	29 b9       	out	0x09, r18	; 9
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	08 95       	ret

000000d8 <UART_recieveByte>:
uint8_t UART_recieveByte(void) {
	
	uint8_t recieved_data ;  /* Var to hold received data */
	
	/* Wait for data to be received */
	while(BIT_IS_CLEAR(UCSRA,RXC));
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <UART_recieveByte>
	
	recieved_data = UDR;  /* Get  received data from buffer */
  dc:	8c b1       	in	r24, 0x0c	; 12
	
	return recieved_data;
}
  de:	08 95       	ret

000000e0 <__udivmodsi4>:
  e0:	a1 e2       	ldi	r26, 0x21	; 33
  e2:	1a 2e       	mov	r1, r26
  e4:	aa 1b       	sub	r26, r26
  e6:	bb 1b       	sub	r27, r27
  e8:	fd 01       	movw	r30, r26
  ea:	0d c0       	rjmp	.+26     	; 0x106 <__udivmodsi4_ep>

000000ec <__udivmodsi4_loop>:
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	ee 1f       	adc	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e4 07       	cpc	r30, r20
  fa:	f5 07       	cpc	r31, r21
  fc:	20 f0       	brcs	.+8      	; 0x106 <__udivmodsi4_ep>
  fe:	a2 1b       	sub	r26, r18
 100:	b3 0b       	sbc	r27, r19
 102:	e4 0b       	sbc	r30, r20
 104:	f5 0b       	sbc	r31, r21

00000106 <__udivmodsi4_ep>:
 106:	66 1f       	adc	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	88 1f       	adc	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	1a 94       	dec	r1
 110:	69 f7       	brne	.-38     	; 0xec <__udivmodsi4_loop>
 112:	60 95       	com	r22
 114:	70 95       	com	r23
 116:	80 95       	com	r24
 118:	90 95       	com	r25
 11a:	9b 01       	movw	r18, r22
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	cf 01       	movw	r24, r30
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
