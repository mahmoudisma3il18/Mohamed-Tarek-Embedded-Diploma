
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e3b  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086f  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000638  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000573  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b2  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  7a:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_sendCommand>:
}

void LCD_sendCommand(uint8_t command)
{
	
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7e       	andi	r25, 0xEF	; 239
  86:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 7d       	andi	r25, 0xDF	; 223
  8c:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	e9 ef       	ldi	r30, 0xF9	; 249
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_sendCommand+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_sendCommand+0x16>
  98:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT_OUT,E);
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	92 bb       	out	0x12, r25	; 18
  a0:	e9 ef       	ldi	r30, 0xF9	; 249
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_sendCommand+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_sendCommand+0x28>
  aa:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT_OUT = command;
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_sendCommand+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_sendCommand+0x36>
  b8:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
  c0:	e9 ef       	ldi	r30, 0xF9	; 249
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_sendCommand+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_sendCommand+0x48>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <LCD_init>:
/*--------------------------------- Functions --------------------------------------*/

void LCD_init()
{
	
	LCD_DATA_PORT_DIR = 0xFF ; 
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<RW) | (1<<E);
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 67       	ori	r24, 0x70	; 112
  d6:	81 bb       	out	0x11, r24	; 17
	
	LCD_sendCommand(SET_LCD_TWO_LINE_EIGHT_BIT_MODE);
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_BLINKING);
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_sendCommand>
  ea:	08 95       	ret

000000ec <LCD_displayCharacter>:
}

void LCD_displayCharacter(uint8_t data)
{
	
	SET_BIT(LCD_CTRL_PORT_OUT,RS);
  ec:	92 b3       	in	r25, 0x12	; 18
  ee:	90 61       	ori	r25, 0x10	; 16
  f0:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW);
  f2:	92 b3       	in	r25, 0x12	; 18
  f4:	9f 7d       	andi	r25, 0xDF	; 223
  f6:	92 bb       	out	0x12, r25	; 18
  f8:	e9 ef       	ldi	r30, 0xF9	; 249
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_displayCharacter+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_displayCharacter+0x16>
 102:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT_OUT,E);
 104:	92 b3       	in	r25, 0x12	; 18
 106:	90 64       	ori	r25, 0x40	; 64
 108:	92 bb       	out	0x12, r25	; 18
 10a:	e9 ef       	ldi	r30, 0xF9	; 249
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_displayCharacter+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_displayCharacter+0x28>
 114:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT_OUT = data;
 116:	85 bb       	out	0x15, r24	; 21
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_displayCharacter+0x30>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_displayCharacter+0x36>
 122:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	82 bb       	out	0x12, r24	; 18
 12a:	e9 ef       	ldi	r30, 0xF9	; 249
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_displayCharacter+0x42>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_displayCharacter+0x48>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <main>:
#include "SPI.h"
#include "lcd.h"


int main(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x8>
 140:	00 d0       	rcall	.+0      	; 0x142 <main+0xa>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	/* SPI Handler */
	SPI_Config SPI_Hanler = {SPI_Device_Mode_SLAVE,
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	26 e0       	ldi	r18, 0x06	; 6
 14c:	fc 01       	movw	r30, r24
 14e:	11 92       	st	Z+, r1
 150:	2a 95       	dec	r18
 152:	e9 f7       	brne	.-6      	; 0x14e <main+0x16>
							 fosc_4,
							 SPI_IRQ_Disable};
							 
	uint8_t var;						 
							 
	SPI_init(&SPI_Hanler);        /* Init SPI  */
 154:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_init>
	LCD_init();					  /* Init LCD  */	 
 158:	0e 94 67 00 	call	0xce	; 0xce <LCD_init>
    while (1) 
    {
		var = SPI_receiveByte();
 15c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_receiveByte>
		LCD_displayCharacter(var);
 160:	0e 94 76 00 	call	0xec	; 0xec <LCD_displayCharacter>
 164:	fb cf       	rjmp	.-10     	; 0x15c <main+0x24>

00000166 <SPI_init>:
	/* Put Data in buffer register */
	SPDR = data;
	
	/* Wait for transmission complete */
	while(BIT_IS_CLEAR(SPSR,SPIF));
}
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	80 31       	cpi	r24, 0x10	; 16
 16c:	69 f4       	brne	.+26     	; 0x188 <SPI_init+0x22>
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	80 62       	ori	r24, 0x20	; 32
 172:	87 bb       	out	0x17, r24	; 23
 174:	87 b3       	in	r24, 0x17	; 23
 176:	80 68       	ori	r24, 0x80	; 128
 178:	87 bb       	out	0x17, r24	; 23
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	87 bb       	out	0x17, r24	; 23
 180:	87 b3       	in	r24, 0x17	; 23
 182:	8f 7b       	andi	r24, 0xBF	; 191
 184:	87 bb       	out	0x17, r24	; 23
 186:	0c c0       	rjmp	.+24     	; 0x1a0 <SPI_init+0x3a>
 188:	87 b3       	in	r24, 0x17	; 23
 18a:	8f 7e       	andi	r24, 0xEF	; 239
 18c:	87 bb       	out	0x17, r24	; 23
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	87 bb       	out	0x17, r24	; 23
 194:	87 b3       	in	r24, 0x17	; 23
 196:	80 64       	ori	r24, 0x40	; 64
 198:	87 bb       	out	0x17, r24	; 23
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	8f 77       	andi	r24, 0x7F	; 127
 19e:	87 bb       	out	0x17, r24	; 23
 1a0:	51 81       	ldd	r21, Z+1	; 0x01
 1a2:	80 81       	ld	r24, Z
 1a4:	43 81       	ldd	r20, Z+3	; 0x03
 1a6:	32 81       	ldd	r19, Z+2	; 0x02
 1a8:	24 81       	ldd	r18, Z+4	; 0x04
 1aa:	95 81       	ldd	r25, Z+5	; 0x05
 1ac:	85 2b       	or	r24, r21
 1ae:	84 2b       	or	r24, r20
 1b0:	83 2b       	or	r24, r19
 1b2:	82 2b       	or	r24, r18
 1b4:	89 2b       	or	r24, r25
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	8d b9       	out	0x0d, r24	; 13
 1ba:	08 95       	ret

000001bc <SPI_receiveByte>:
	
	/* Var to hold returned data */
	uint8_t ret_data;
	
	/* Wait for reception complete */
	while(BIT_IS_CLEAR(SPSR,SPIF));
 1bc:	77 9b       	sbis	0x0e, 7	; 14
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <SPI_receiveByte>

	/* Return data register */
	ret_data = SPDR;
 1c0:	8f b1       	in	r24, 0x0f	; 15
	return ret_data;
}
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
