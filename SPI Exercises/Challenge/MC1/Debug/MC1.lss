
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000198  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b46  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000818  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000525  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027a  00000000  00000000  00002187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_getPressedKey>:

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	2a c0       	rjmp	.+84     	; 0xdc <KEYPAD_getPressedKey+0x5a>
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <KEYPAD_getPressedKey+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <KEYPAD_getPressedKey+0xe>
  98:	8a bb       	out	0x1a, r24	; 26
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
  9a:	80 95       	com	r24
  9c:	8b bb       	out	0x1b, r24	; 27
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <KEYPAD_getPressedKey+0x50>
		{
			
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <KEYPAD_getPressedKey+0x2e>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <KEYPAD_getPressedKey+0x2a>
  b4:	80 fd       	sbrc	r24, 0
  b6:	0b c0       	rjmp	.+22     	; 0xce <KEYPAD_getPressedKey+0x4c>
				return keypad[row][col];	
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	20 5a       	subi	r18, 0xA0	; 160
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	f9 01       	movw	r30, r18
  c6:	e4 0f       	add	r30, r20
  c8:	f5 1f       	adc	r31, r21
  ca:	80 81       	ld	r24, Z
  cc:	08 95       	ret
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	24 30       	cpi	r18, 0x04	; 4
  d4:	31 05       	cpc	r19, r1
  d6:	34 f3       	brlt	.-52     	; 0xa4 <KEYPAD_getPressedKey+0x22>

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	44 30       	cpi	r20, 0x04	; 4
  de:	51 05       	cpc	r21, r1
  e0:	9c f2       	brlt	.-90     	; 0x88 <KEYPAD_getPressedKey+0x6>
  e2:	cf cf       	rjmp	.-98     	; 0x82 <KEYPAD_getPressedKey>

000000e4 <main>:
#include "keypad.h"
#include "SPI.h"


int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	00 d0       	rcall	.+0      	; 0xea <main+0x6>
  ea:	00 d0       	rcall	.+0      	; 0xec <main+0x8>
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0xa>
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	/* Handler to SPI Configs */
	SPI_Config SPI_Handler = {SPI_Device_Mode_MASTER,
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	1a 82       	std	Y+2, r1	; 0x02
  f8:	1b 82       	std	Y+3, r1	; 0x03
  fa:	1c 82       	std	Y+4, r1	; 0x04
  fc:	1d 82       	std	Y+5, r1	; 0x05
  fe:	1e 82       	std	Y+6, r1	; 0x06
							  fosc_4,
							  SPI_IRQ_Disable};
							
	uint8_t var;     						  
							  
	SPI_init(&SPI_Handler);				/* Init SPI */
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f eb       	ldi	r18, 0xBF	; 191
 10a:	87 e2       	ldi	r24, 0x27	; 39
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x34>
 118:	00 00       	nop
	
	_delay_ms(3000);                /* Delay until MC2 is Initialized */
			  
    while (1) 
    {
		var = KEYPAD_getPressedKey();    /* Read data from keypad */
 11a:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_getPressedKey>
		SPI_sendByte(var);               /* Send data over SPI    */
 11e:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_sendByte>
 122:	2f e9       	ldi	r18, 0x9F	; 159
 124:	86 e8       	ldi	r24, 0x86	; 134
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x44>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x4e>
 132:	00 00       	nop
 134:	f2 cf       	rjmp	.-28     	; 0x11a <main+0x36>

00000136 <SPI_init>:



/*------------------------------ Functions ---------------------------------*/

void SPI_init(SPI_Config *ptr_config) {
 136:	fc 01       	movw	r30, r24
	
	if (ptr_config->Device_Mode == SPI_Device_Mode_MASTER)
 138:	80 81       	ld	r24, Z
 13a:	80 31       	cpi	r24, 0x10	; 16
 13c:	69 f4       	brne	.+26     	; 0x158 <SPI_init+0x22>
	{
		/* Set MOSI and SCK output and SS, all others input */
		SET_BIT(DDRB,PB5);    /* MOSI Pin */
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	80 62       	ori	r24, 0x20	; 32
 142:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB,PB7);    /* SCK Pin */
 144:	87 b3       	in	r24, 0x17	; 23
 146:	80 68       	ori	r24, 0x80	; 128
 148:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB,PB4);    /* SS Pin */
 14a:	87 b3       	in	r24, 0x17	; 23
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	87 bb       	out	0x17, r24	; 23
		CLEAR_BIT(DDRB,PB6);  /* MISO Pin */
 150:	87 b3       	in	r24, 0x17	; 23
 152:	8f 7b       	andi	r24, 0xBF	; 191
 154:	87 bb       	out	0x17, r24	; 23
 156:	0c c0       	rjmp	.+24     	; 0x170 <SPI_init+0x3a>
	}
	else
	{
		/* Set MISO output, all others input */
		CLEAR_BIT(DDRB,PB4);   /* SS Pin */
 158:	87 b3       	in	r24, 0x17	; 23
 15a:	8f 7e       	andi	r24, 0xEF	; 239
 15c:	87 bb       	out	0x17, r24	; 23
		CLEAR_BIT(DDRB,PB5);   /* MOSI Pin */
 15e:	87 b3       	in	r24, 0x17	; 23
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB,PB6);     /* MISO Pin */
 164:	87 b3       	in	r24, 0x17	; 23
 166:	80 64       	ori	r24, 0x40	; 64
 168:	87 bb       	out	0x17, r24	; 23
		CLEAR_BIT(DDRB,PB7);  /* SCK Pin */
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	8f 77       	andi	r24, 0x7F	; 127
 16e:	87 bb       	out	0x17, r24	; 23
	}
	
	
	/* Enable SPI , Set Frame format ,Device Mode , CLK Phase and Polarity , BuadRate , Intterupt Enable */
	 SPCR = (1<<SPE) | (ptr_config->Frame_Format) | (ptr_config->Device_Mode) | (ptr_config->CLKPhase) | (ptr_config->CLKPolarity) | (ptr_config->SPI_BAUDRATEPRESCALER) | (ptr_config->IRQ_Enable);
 170:	51 81       	ldd	r21, Z+1	; 0x01
 172:	80 81       	ld	r24, Z
 174:	43 81       	ldd	r20, Z+3	; 0x03
 176:	32 81       	ldd	r19, Z+2	; 0x02
 178:	24 81       	ldd	r18, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	85 2b       	or	r24, r21
 17e:	84 2b       	or	r24, r20
 180:	83 2b       	or	r24, r19
 182:	82 2b       	or	r24, r18
 184:	89 2b       	or	r24, r25
 186:	80 64       	ori	r24, 0x40	; 64
 188:	8d b9       	out	0x0d, r24	; 13
 18a:	08 95       	ret

0000018c <SPI_sendByte>:
}

void SPI_sendByte(uint8_t data) {
	
	/* Put Data in buffer register */
	SPDR = data;
 18c:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(BIT_IS_CLEAR(SPSR,SPIF));
 18e:	77 9b       	sbis	0x0e, 7	; 14
 190:	fe cf       	rjmp	.-4      	; 0x18e <SPI_sendByte+0x2>
}
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
