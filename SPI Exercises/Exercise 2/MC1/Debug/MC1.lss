
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bb  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b1  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000257  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include "SPI.h"


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	SET_BIT(DDRB,PB0);            /* Set pin as output to select slave */
  90:	87 b3       	in	r24, 0x17	; 23
  92:	81 60       	ori	r24, 0x01	; 1
  94:	87 bb       	out	0x17, r24	; 23
	
	/* Handler to SPI Config*/
	SPI_Config spi_handler = {SPI_Device_Mode_MASTER,
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	1a 82       	std	Y+2, r1	; 0x02
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	1c 82       	std	Y+4, r1	; 0x04
  a0:	1d 82       	std	Y+5, r1	; 0x05
  a2:	1e 82       	std	Y+6, r1	; 0x06
		SPI_CLKPolarity_LOW_when_idle,
		SPI_Clock_Phase_1EDGE_sample,
		fosc_4,
		SPI_IRQ_Disable};
	
	SPI_init(&spi_handler);	    /* Init SPI */
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e3       	ldi	r18, 0x3F	; 63
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3a>
  bc:	00 00       	nop
	
	_delay_ms(5000);           /* Delay until MC2 is Initialized */
	
	SPI_sendString("Kill");        /* SPI Send String */
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 93 00 	call	0x126	; 0x126 <SPI_sendString>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x44>

000000c8 <SPI_init>:
	while(BIT_IS_CLEAR(SPSR,SPIF));

	/* Return data register */
	ret_data = SPDR;
	return ret_data;
}
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	80 31       	cpi	r24, 0x10	; 16
  ce:	69 f4       	brne	.+26     	; 0xea <SPI_init+0x22>
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	87 bb       	out	0x17, r24	; 23
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	0c c0       	rjmp	.+24     	; 0x102 <SPI_init+0x3a>
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	87 bb       	out	0x17, r24	; 23
 102:	51 81       	ldd	r21, Z+1	; 0x01
 104:	80 81       	ld	r24, Z
 106:	43 81       	ldd	r20, Z+3	; 0x03
 108:	32 81       	ldd	r19, Z+2	; 0x02
 10a:	24 81       	ldd	r18, Z+4	; 0x04
 10c:	95 81       	ldd	r25, Z+5	; 0x05
 10e:	85 2b       	or	r24, r21
 110:	84 2b       	or	r24, r20
 112:	83 2b       	or	r24, r19
 114:	82 2b       	or	r24, r18
 116:	89 2b       	or	r24, r25
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	8d b9       	out	0x0d, r24	; 13
 11c:	08 95       	ret

0000011e <SPI_sendByte>:
 11e:	8f b9       	out	0x0f, r24	; 15
 120:	77 9b       	sbis	0x0e, 7	; 14
 122:	fe cf       	rjmp	.-4      	; 0x120 <SPI_sendByte+0x2>
 124:	08 95       	ret

00000126 <SPI_sendString>:

/* Send array of uint8_t */
void SPI_sendString(uint8_t* p_data) {
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	8c 01       	movw	r16, r24
	
	uint8_t i = 0 ; /* Counter */
 12e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(p_data[i] != '\0')   /* Loop until data is send */
 130:	03 c0       	rjmp	.+6      	; 0x138 <SPI_sendString+0x12>
	{
		SPI_sendByte(p_data[i]);
 132:	0e 94 8f 00 	call	0x11e	; 0x11e <SPI_sendByte>
		i++;
 136:	cf 5f       	subi	r28, 0xFF	; 255
/* Send array of uint8_t */
void SPI_sendString(uint8_t* p_data) {
	
	uint8_t i = 0 ; /* Counter */
	
	while(p_data[i] != '\0')   /* Loop until data is send */
 138:	f8 01       	movw	r30, r16
 13a:	ec 0f       	add	r30, r28
 13c:	f1 1d       	adc	r31, r1
 13e:	80 81       	ld	r24, Z
 140:	81 11       	cpse	r24, r1
 142:	f7 cf       	rjmp	.-18     	; 0x132 <SPI_sendString+0xc>
	{
		SPI_sendByte(p_data[i]);
		i++;
	}
	SPI_sendByte('\0');       /* Send terminating char */
 144:	0e 94 8f 00 	call	0x11e	; 0x11e <SPI_sendByte>
}
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
