
Exercise_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a9  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d3  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "SPI.h"



int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <main+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	SET_BIT(DDRB,PB0);     /* PB0 as output to select Slave */
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	87 bb       	out	0x17, r24	; 23
	CLEAR_BIT(DDRA,PA0);   /* PA0 as input to check switch */
  80:	8a b3       	in	r24, 0x1a	; 26
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	8a bb       	out	0x1a, r24	; 26
	SPI_Config spi_handler = {SPI_Device_Mode_MASTER,
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	1b 82       	std	Y+3, r1	; 0x03
  8e:	1c 82       	std	Y+4, r1	; 0x04
  90:	1d 82       	std	Y+5, r1	; 0x05
  92:	1e 82       	std	Y+6, r1	; 0x06
		SPI_CLKPolarity_LOW_when_idle,
		SPI_Clock_Phase_1EDGE_sample,
		fosc_4,
		SPI_IRQ_Disable};
	
	SPI_init(&spi_handler);	
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_init>
		
    while (1) 
    {
		SPI_slaveSelect(PORTB,PB0);  /* Select Slave */
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	0e 94 8f 00 	call	0x11e	; 0x11e <SPI_slaveSelect>
		if (BIT_IS_SET(PINA,PA0))
  a4:	c8 9b       	sbis	0x19, 0	; 25
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x44>
		{
			SPI_sendByte(1);        /* SPI Send Byte */
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_sendByte>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x4a>
		} 
		else
		{
			SPI_sendByte(0);      /* SPI Send Byte  */
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_sendByte>
		}
		SPI_slaveUnselect(PORTB,PB0); /* Unselect slave */
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	0e 94 90 00 	call	0x120	; 0x120 <SPI_slaveUnselect>
    }
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0x30>

000000c0 <SPI_init>:
  c0:	fc 01       	movw	r30, r24
  c2:	80 81       	ld	r24, Z
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	69 f4       	brne	.+26     	; 0xe2 <SPI_init+0x22>
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	87 bb       	out	0x17, r24	; 23
  da:	87 b3       	in	r24, 0x17	; 23
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	87 bb       	out	0x17, r24	; 23
  e0:	0c c0       	rjmp	.+24     	; 0xfa <SPI_init+0x3a>
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	51 81       	ldd	r21, Z+1	; 0x01
  fc:	80 81       	ld	r24, Z
  fe:	43 81       	ldd	r20, Z+3	; 0x03
 100:	32 81       	ldd	r19, Z+2	; 0x02
 102:	24 81       	ldd	r18, Z+4	; 0x04
 104:	95 81       	ldd	r25, Z+5	; 0x05
 106:	85 2b       	or	r24, r21
 108:	84 2b       	or	r24, r20
 10a:	83 2b       	or	r24, r19
 10c:	82 2b       	or	r24, r18
 10e:	89 2b       	or	r24, r25
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8d b9       	out	0x0d, r24	; 13
 114:	08 95       	ret

00000116 <SPI_sendByte>:
 116:	8f b9       	out	0x0f, r24	; 15
 118:	77 9b       	sbis	0x0e, 7	; 14
 11a:	fe cf       	rjmp	.-4      	; 0x118 <SPI_sendByte+0x2>
 11c:	08 95       	ret

0000011e <SPI_slaveSelect>:
 11e:	08 95       	ret

00000120 <SPI_slaveUnselect>:
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
