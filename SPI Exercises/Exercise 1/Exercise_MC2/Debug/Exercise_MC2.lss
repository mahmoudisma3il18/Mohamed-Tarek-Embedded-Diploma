
Exercise_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089f  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f1  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "SPI.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <main+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	SET_BIT(DDRC,PC3);     /* Set pin as Output for LED */
  7a:	84 b3       	in	r24, 0x14	; 20
  7c:	88 60       	ori	r24, 0x08	; 8
  7e:	84 bb       	out	0x14, r24	; 20
	
	/* Handler For SPI Config */
	SPI_Config spi_handler = {SPI_Device_Mode_SLAVE,   
  80:	ce 01       	movw	r24, r28
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	26 e0       	ldi	r18, 0x06	; 6
  86:	fc 01       	movw	r30, r24
  88:	11 92       	st	Z+, r1
  8a:	2a 95       	dec	r18
  8c:	e9 f7       	brne	.-6      	; 0x88 <main+0x1c>
		SPI_CLKPolarity_LOW_when_idle,
		SPI_Clock_Phase_1EDGE_sample,
		fosc_4,
		SPI_IRQ_Disable};
	
	SPI_init(&spi_handler);    /* Init SPI */	
  8e:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_init>
	
	uint8_t recived_data ;   /* Var to hold received data from SPI */
		
    while (1) 
    {
		recived_data = SPI_receiveByte();
  92:	0e 94 80 00 	call	0x100	; 0x100 <SPI_receiveByte>
		if (recived_data == 1)
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <main+0x36>
		{
			SET_BIT(PORTC,PC3);     /* Turn on LED  */
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	f8 cf       	rjmp	.-16     	; 0x92 <main+0x26>
		}
		else
		{
			CLEAR_BIT(PORTC,PC3);   /* Turn Off LED */
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	f4 cf       	rjmp	.-24     	; 0x92 <main+0x26>

000000aa <SPI_init>:
	/* Put Data in buffer register */
	SPDR = data;
	
	/* Wait for transmission complete */
	while(BIT_IS_CLEAR(SPSR,SPIF));
}
  aa:	fc 01       	movw	r30, r24
  ac:	80 81       	ld	r24, Z
  ae:	80 31       	cpi	r24, 0x10	; 16
  b0:	69 f4       	brne	.+26     	; 0xcc <SPI_init+0x22>
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	87 bb       	out	0x17, r24	; 23
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <SPI_init+0x3a>
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	87 bb       	out	0x17, r24	; 23
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	51 81       	ldd	r21, Z+1	; 0x01
  e6:	80 81       	ld	r24, Z
  e8:	43 81       	ldd	r20, Z+3	; 0x03
  ea:	32 81       	ldd	r19, Z+2	; 0x02
  ec:	24 81       	ldd	r18, Z+4	; 0x04
  ee:	95 81       	ldd	r25, Z+5	; 0x05
  f0:	85 2b       	or	r24, r21
  f2:	84 2b       	or	r24, r20
  f4:	83 2b       	or	r24, r19
  f6:	82 2b       	or	r24, r18
  f8:	89 2b       	or	r24, r25
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8d b9       	out	0x0d, r24	; 13
  fe:	08 95       	ret

00000100 <SPI_receiveByte>:
	
	/* Var to hold returned data */
	uint8_t ret_data;
	
	/* Wait for reception complete */
	while(BIT_IS_CLEAR(SPSR,SPIF));
 100:	77 9b       	sbis	0x0e, 7	; 14
 102:	fe cf       	rjmp	.-4      	; 0x100 <SPI_receiveByte>

	/* Return data register */
	ret_data = SPDR;
 104:	8f b1       	in	r24, 0x0f	; 15
	return ret_data;
}
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
