
Challenge 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000619  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000234  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000357  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include <avr/interrupt.h>

volatile unsigned char twofiveCounter = 0;
volatile unsigned char fiveCounter = 0;

ISR(TIMER0_COMP_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	
	PORTC ^= (1<<PC0); // Toggle pin for 10 khz
  8a:	95 b3       	in	r25, 0x15	; 21
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 27       	eor	r24, r25
  90:	85 bb       	out	0x15, r24	; 21
	twofiveCounter++;
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <twofiveCounter>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <twofiveCounter>
	fiveCounter++;
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if (fiveCounter == 2)
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	29 f4       	brne	.+10     	; 0xb8 <__vector_19+0x3c>
	{
		PORTC ^= (1<<PC1); // Toggle 5 khz pin
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	89 27       	eor	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
		fiveCounter = 0 ; 
  b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if (twofiveCounter == 4)
  b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <twofiveCounter>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	29 f4       	brne	.+10     	; 0xca <__vector_19+0x4e>
	{
		PORTC ^= (1<<PC2); // Toggle 2.5 khz pin
  c0:	95 b3       	in	r25, 0x15	; 21
  c2:	89 27       	eor	r24, r25
  c4:	85 bb       	out	0x15, r24	; 21
		twofiveCounter = 0;
  c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <twofiveCounter>
	}
	
	
	
	
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <Timer0_CMP_Init>:



void Timer0_CMP_Init(void){
	
	SREG |= (1<<7); // Enable Global Interrupt
  d8:	8f b7       	in	r24, 0x3f	; 63
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8f bf       	out	0x3f, r24	; 63
	TCNT0 = 0x00;
  de:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<OCIE0); // Enable Interrupt
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	89 bf       	out	0x39, r24	; 57
	OCR0 = 0x32; // 50 Ticks;
  e6:	82 e3       	ldi	r24, 0x32	; 50
  e8:	8c bf       	out	0x3c, r24	; 60
	DDRC |= (1<<0) | (1<<1) | (1<<2);
  ea:	84 b3       	in	r24, 0x14	; 20
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	84 bb       	out	0x14, r24	; 20
	TCCR0 |= (1<<FOC0) | (1<<WGM01) | (1<<CS01);
  f0:	83 b7       	in	r24, 0x33	; 51
  f2:	8a 68       	ori	r24, 0x8A	; 138
  f4:	83 bf       	out	0x33, r24	; 51
  f6:	08 95       	ret

000000f8 <main>:


int main(void)
{
    /* Replace with your application code */
	Timer0_CMP_Init();
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <Timer0_CMP_Init>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x4>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
