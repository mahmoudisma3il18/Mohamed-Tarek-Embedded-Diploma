
Exercise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000607  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021c  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned char counter = 0;

ISR(TIMER0_OVF_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	
	counter++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (counter == 2)
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	31 f4       	brne	.+12     	; 0xa8 <__vector_9+0x2c>
	{
		PORTC ^= (1<<PC0);
  9c:	95 b3       	in	r25, 0x15	; 21
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	89 27       	eor	r24, r25
  a2:	85 bb       	out	0x15, r24	; 21
		counter = 0;
  a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <Timer0_Init>:

void Timer0_Init(void){
	
	SREG &= ~(1<<7);
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	8f bf       	out	0x3f, r24	; 63
	TCNT0 = 0x00;
  bc:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<TOIE0);
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	89 bf       	out	0x39, r24	; 57
	TCCR0 =(1<<CS02) | (1<<CS00) | (1<<FOC0);
  c4:	85 e8       	ldi	r24, 0x85	; 133
  c6:	83 bf       	out	0x33, r24	; 51
	SREG |=(1<<7);
  c8:	8f b7       	in	r24, 0x3f	; 63
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8f bf       	out	0x3f, r24	; 63
  ce:	08 95       	ret

000000d0 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC |= (1<<PC0);
  d0:	84 b3       	in	r24, 0x14	; 20
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<PC0);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	85 bb       	out	0x15, r24	; 21
	Timer0_Init();
  dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <Timer0_Init>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x10>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
