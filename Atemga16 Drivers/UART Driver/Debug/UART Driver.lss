
UART Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000686  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "UART.h"

int main(void)
{
    /* Replace with your application code */
	UART_init(BaudRate_9600); // Intialeze Uart and set baud rate to 9600
  6c:	80 e8       	ldi	r24, 0x80	; 128
  6e:	95 e2       	ldi	r25, 0x25	; 37
  70:	0e 94 3b 00 	call	0x76	; 0x76 <UART_init>
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <UART_init>:
/*
Description : Initialize UART driver
*/
void UART_init(UART_BaudRate br) {
	
	uint16_t br_value = ((F_CPU) / (16 * br)) - 1 ; // Calcultes value to be put in baud rate register
  76:	82 95       	swap	r24
  78:	92 95       	swap	r25
  7a:	90 7f       	andi	r25, 0xF0	; 240
  7c:	98 27       	eor	r25, r24
  7e:	80 7f       	andi	r24, 0xF0	; 240
  80:	98 27       	eor	r25, r24
  82:	9c 01       	movw	r18, r24
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	60 e4       	ldi	r22, 0x40	; 64
  8a:	72 e4       	ldi	r23, 0x42	; 66
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 55 00 	call	0xaa	; 0xaa <__udivmodsi4>
  94:	21 50       	subi	r18, 0x01	; 1
  96:	31 09       	sbc	r19, r1
	
	/*  Set Baud Rate  */
	UBRRL = (br_value & 0xFF); // Set Bits from 0 to 7
  98:	29 b9       	out	0x09, r18	; 9
	UBRRH = (br_value & 0xF00) >> 8 ; // Set Bits from 8 to 12
  9a:	22 27       	eor	r18, r18
  9c:	3f 70       	andi	r19, 0x0F	; 15
  9e:	30 bd       	out	0x20, r19	; 32
	
	/*  Enable Receiver and Transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
	    1. Asynchronous Mode
		2. No Parity Bit
		3. 1 Stop Bit
		4. 8-bit Data 
	*/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
  a8:	08 95       	ret

000000aa <__udivmodsi4>:
  aa:	a1 e2       	ldi	r26, 0x21	; 33
  ac:	1a 2e       	mov	r1, r26
  ae:	aa 1b       	sub	r26, r26
  b0:	bb 1b       	sub	r27, r27
  b2:	fd 01       	movw	r30, r26
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <__udivmodsi4_ep>

000000b6 <__udivmodsi4_loop>:
  b6:	aa 1f       	adc	r26, r26
  b8:	bb 1f       	adc	r27, r27
  ba:	ee 1f       	adc	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e4 07       	cpc	r30, r20
  c4:	f5 07       	cpc	r31, r21
  c6:	20 f0       	brcs	.+8      	; 0xd0 <__udivmodsi4_ep>
  c8:	a2 1b       	sub	r26, r18
  ca:	b3 0b       	sbc	r27, r19
  cc:	e4 0b       	sbc	r30, r20
  ce:	f5 0b       	sbc	r31, r21

000000d0 <__udivmodsi4_ep>:
  d0:	66 1f       	adc	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	88 1f       	adc	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	1a 94       	dec	r1
  da:	69 f7       	brne	.-38     	; 0xb6 <__udivmodsi4_loop>
  dc:	60 95       	com	r22
  de:	70 95       	com	r23
  e0:	80 95       	com	r24
  e2:	90 95       	com	r25
  e4:	9b 01       	movw	r18, r22
  e6:	ac 01       	movw	r20, r24
  e8:	bd 01       	movw	r22, r26
  ea:	cf 01       	movw	r24, r30
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
