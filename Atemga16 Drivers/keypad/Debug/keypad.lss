
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000716  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000626  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000058  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_getPressedKey>:

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	2a c0       	rjmp	.+84     	; 0xdc <KEYPAD_getPressedKey+0x5a>
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <KEYPAD_getPressedKey+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <KEYPAD_getPressedKey+0xe>
  98:	8a bb       	out	0x1a, r24	; 26
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
  9a:	80 95       	com	r24
  9c:	8b bb       	out	0x1b, r24	; 27
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <KEYPAD_getPressedKey+0x50>
		{
			
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <KEYPAD_getPressedKey+0x2e>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <KEYPAD_getPressedKey+0x2a>
  b4:	80 fd       	sbrc	r24, 0
  b6:	0b c0       	rjmp	.+22     	; 0xce <KEYPAD_getPressedKey+0x4c>
				return keypad[row][col];	
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	20 5a       	subi	r18, 0xA0	; 160
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	f9 01       	movw	r30, r18
  c6:	e4 0f       	add	r30, r20
  c8:	f5 1f       	adc	r31, r21
  ca:	80 81       	ld	r24, Z
  cc:	08 95       	ret
	{
		KEYPAD_PORT_DIR = (0x10<<col); // set column as output
		
		KEYPAD_PORT_OUT = (~(0x10<<col)); // Enable PULL-UP resistor in all pins except for the column and write logic low on column
		
		for(int row = 0 ; row < NO_OF_ROWS ; row++)
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	24 30       	cpi	r18, 0x04	; 4
  d4:	31 05       	cpc	r19, r1
  d6:	34 f3       	brlt	.-52     	; 0xa4 <KEYPAD_getPressedKey+0x22>

uint8_t KEYPAD_getPressedKey()
{
	while(1) {
		
	for (int col = 0 ; col < NO_OF_COLS;col++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	44 30       	cpi	r20, 0x04	; 4
  de:	51 05       	cpc	r21, r1
  e0:	9c f2       	brlt	.-90     	; 0x88 <KEYPAD_getPressedKey+0x6>
  e2:	cf cf       	rjmp	.-98     	; 0x82 <KEYPAD_getPressedKey>

000000e4 <main>:


int main(void)
{
	uint8_t key;
	DDRC  |= 0x0F; /* 7-segment pins as output pins */
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	8f 60       	ori	r24, 0x0F	; 15
  e8:	84 bb       	out	0x14, r24	; 20
	PORTC &= 0xF0; /* 7-segment displays Zero at the beginning */
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		key = KEYPAD_getPressedKey() - '0'; /* get the pressed button from keypad */
  f0:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_getPressedKey>
  f4:	80 53       	subi	r24, 0x30	; 48
		if((key >= 0) && (key <= 9))
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	d8 f7       	brcc	.-10     	; 0xf0 <main+0xc>
		{
			PORTC = key;
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	f9 cf       	rjmp	.-14     	; 0xf0 <main+0xc>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
